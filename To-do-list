<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea, #764ba2);
            padding: 20px;
        }
        .container {
            text-align: center;
            width: 100%;
            max-width: 400px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.2);
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        h1 {
            margin-bottom: 20px;
            color: #333;
        }
        input {
            width: 70%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 6px;
            outline: none;
            transition: 0.3s;
        }
        input:focus {
            border-color: #5c6bc0;
        }
        button {
            padding: 10px 15px;
            margin-left: 10px;
            background: #5c6bc0;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: 0.3s;
        }
        button:hover {
            background: #3f51b5;
        }
        ul {
            list-style-type: none;
            margin-top: 20px;
            padding: 0;
        }
        li {
            background: #f9f9f9;
            margin: 8px 0;
            padding: 10px;
            border-radius: 6px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
        }
        li.removing {
            opacity: 0;
            transform: translateX(50px);
        }
        li.completed {
            text-decoration: line-through;
            color: gray;
            opacity: 0.7;
            transition: 0.3s;
        }
        .remove-btn {
            background: #e74c3c;
            border: none;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            transition: 0.3s;
        }
        .remove-btn:hover {
            background: #c0392b;
        }
        #clear-all-btn {
            margin-top: 15px;
            padding: 10px 15px;
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: 0.3s;
        }
        #clear-all-btn:hover {
            background: #c0392b;
        }
    </style>
</head> 
<body> 
    <div class="container"> 
        <h1>Minha To-Do List ✨</h1>
        <input type="text" id="task-input" placeholder="Adicione uma nova tarefa..." aria-label="Campo para adicionar nova tarefa">
        <button id="add-task-btn">Adicionar</button>
        <ul id="task-list"></ul>
        <button id="clear-all-btn">Limpar Tudo</button>
    </div>
    
    <script>
        const input = document.getElementById("task-input");
        const btn = document.getElementById("add-task-btn");
        const list = document.getElementById("task-list");
        const clearAllBtn = document.getElementById("clear-all-btn");

        // Recupera as tarefas salvas
        const savedTasks = JSON.parse(localStorage.getItem("tasks")) || [];
        savedTasks.forEach(taskObj => addTaskToList(taskObj.text, taskObj.completed));

        btn.addEventListener("click", addTask);
        input.addEventListener("keypress", (event) => {
            if (event.key === "Enter") addTask();
        });

        function addTask() {
            const taskText = input.value.trim();
            if (taskText === "") return;

            const existingTasks = JSON.parse(localStorage.getItem("tasks")) || [];
            if (existingTasks.some(task => task.text === taskText)) {
                alert("Essa tarefa já existe!");
                return;
            }

            addTaskToList(taskText, false);
            saveTask({ text: taskText, completed: false });
            input.value = "";
        }

        function addTaskToList(taskText, completed) {
            const li = document.createElement("li");
            li.textContent = taskText;

            if (completed) {
                li.classList.add("completed");
            }

            li.addEventListener("click", () => {
                li.classList.toggle("completed");
                updateTaskStatus(taskText, li.classList.contains("completed"));
            });

            const removeBtn = document.createElement("button");
            removeBtn.textContent = "Remover";
            removeBtn.classList.add("remove-btn");
            removeBtn.addEventListener("click", (event) => {
                event.stopPropagation();
                li.classList.add("removing");
                setTimeout(() => {
                    li.remove();
                    removeTask(taskText);
                }, 300);
            });

            li.appendChild(removeBtn);
            list.appendChild(li);
        }

        function saveTask(taskObj) {
            const tasks = JSON.parse(localStorage.getItem("tasks")) || [];
            tasks.push(taskObj);
            localStorage.setItem("tasks", JSON.stringify(tasks));
        }

        function removeTask(taskText) {
            let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
            tasks = tasks.filter(task => task.text !== taskText);
            localStorage.setItem("tasks", JSON.stringify(tasks));
        }

        function updateTaskStatus(taskText, completed) {
            const tasks = JSON.parse(localStorage.getItem("tasks")) || [];
            const updatedTasks = tasks.map(task =>
                task.text === taskText ? { ...task, completed } : task
            );
            localStorage.setItem("tasks", JSON.stringify(updatedTasks));
        }

        clearAllBtn.addEventListener("click", () => {
            list.childNodes.forEach((task) => task.classList.add("removing"));
            setTimeout(() => {
                localStorage.removeItem("tasks");
                list.innerHTML = "";
            }, 300);
        });

    </script>
</body> 
</html>
